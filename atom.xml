<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon Hsi&#39;s Blog</title>
  
  
  <link href="http://leonhsi.github.io/atom.xml" rel="self"/>
  
  <link href="http://leonhsi.github.io/"/>
  <updated>2023-04-20T05:29:49.723Z</updated>
  <id>http://leonhsi.github.io/</id>
  
  <author>
    <name>Leon Hsi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Simple Bank - Backend Project Notes</title>
    <link href="http://leonhsi.github.io/2023/04/18/Simple-Bank-Backend-Project-Notes/"/>
    <id>http://leonhsi.github.io/2023/04/18/Simple-Bank-Backend-Project-Notes/</id>
    <published>2023-04-18T11:24:51.000Z</published>
    <updated>2023-04-20T05:29:49.723Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><h2 id="Lecture-07-DB-Trasnaction-Lock"><a href="#Lecture-07-DB-Trasnaction-Lock" class="headerlink" title="Lecture 07: DB Trasnaction Lock"></a>Lecture 07: DB Trasnaction Lock</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccount :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>加上</p><ul><li><p><strong>FOR UPDATE</strong></p><ul><li>因為同時會有很多transaction去更新(select) account</li><li>若一個account被select, 但不block其他select account, 則account可能會無法被正確更新</li><li>加上FOR UPDATE: block其他query<ul><li>這個query select的東西會被update, 所以sql會先block它</li></ul></li></ul></li><li><p>FOR <strong>NO KEY</strong> UPDATE</p><ul><li>因為primary key不會update</li><li>告訴db說不要因為primary key被使用就block其他query</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">NO</span> KEY <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><h2 id="Lecture-08-Avoid-Deadlock"><a href="#Lecture-08-Avoid-Deadlock" class="headerlink" title="Lecture 08: Avoid Deadlock"></a>Lecture 08: Avoid Deadlock</h2><p>avoid:</p><ul><li>transaction 1:<ul><li>update id 1</li><li>update id 2</li></ul></li><li>transaction 2:<ul><li>update id 2</li><li>update id 1</li></ul></li></ul><p><strong>deadlock</strong>!!</p><p>change to:</p><ul><li>transaction 1:<ul><li>update id 1</li><li>update id 2</li></ul></li><li>transaction 2:<ul><li>update id 1</li><li>update id 2</li></ul></li></ul><p>依照固定的order來更新id (小的先更新</p><h2 id="Lecture-09-Isolation-Level"><a href="#Lecture-09-Isolation-Level" class="headerlink" title="Lecture 09: Isolation Level"></a>Lecture 09: Isolation Level</h2><p>A database transaction should follow the <strong>ACID</strong> property:</p><ul><li>Atomicity<ul><li>要馬所有operation都要成功完成, 不然transaction fail且db保持不變</li></ul></li><li>Isolation<ul><li>Concurrent transactions必不會互相影響</li></ul></li><li>Consistency<ul><li>在transaction完成之後, db state必須要是valid的</li></ul></li><li>Durability<ul><li>data written by a successful transaction must be recorded in persistent storage</li></ul></li></ul><p>其中, 有一些 <strong>Read Phenomena</strong> 會影響到 Isolation property:</p><ul><li>Dirty Read<ul><li>一個transaction會讀到其他transaction uncommitted的data</li></ul></li><li>Non-repeatable Read<ul><li>一個transaction重複讀了兩次data卻發現data被修改過(by another <strong>committed</strong> transaction)</li></ul></li><li>Phantom(幻象) Read<ul><li>一個transaction重複搜尋了兩次相同的條件卻得到不同的rows (due to another recently <strong>committed</strong> transaction)</li></ul></li><li>serialization anomaly<ul><li>若將所有的transaction sequentially run, 不可能會得到正確的結果</li></ul></li></ul><p>4 Standard <strong>Isolation Levels</strong> are defined by ANSI:</p><ul><li>Read uncommitted<ul><li>可以看到尚未被commit的data</li></ul></li><li>Read Committed<ul><li>只能看到被commit過後的data (avoid dirty read)</li></ul></li><li>Repeatable read<ul><li>一樣的select query會回傳同樣結果 (avoid non-repeatable &amp; phantom read)</li></ul></li><li>serializable<ul><li>保證serially的按照某種順序去跑transaction, 結果會跟concurrently跑的結果一樣</li></ul></li></ul><p>(MySQL)</p><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Non-repeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>No</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>Serializable</td><td>No</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><p>(PostgreSQL)</p><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Non-repeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>No</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>Serializable</td><td>No</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><p>MySQL v.s. PostgreSQL</p><ul><li><p>MySQL可以設置所有的transaction的isolation level, PostgreSQL只能設定一個transaction的isolation level</p></li><li><p>MySQL</p><ul><li><p>在serializable, mysql預設會把 SELECT 變成 SELECT FOR SHARE</p><ul><li>若transaction 1去 SELECT * from accounts where id &#x3D; 1, 則transaction 2要去update account id 1就會被block</li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> accounts <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">Transaction <span class="number">2</span> would be blocked</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> accounts <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">Dead lock would occur, since T2 <span class="keyword">is</span> waiting T1 <span class="keyword">to</span> <span class="keyword">release</span> the lock, </span><br><span class="line">while T1 <span class="keyword">is</span> also waiting <span class="keyword">to</span> T2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PostgreSQL</p><ul><li>read uncommitted 跟 read committed 一樣<ul><li>read uncommitted 也不允許 dirty read</li></ul></li><li>repeatable read 可以防止 phantom read</li></ul></li><li><p>在serializable level 對付serialization anomaly 的方法</p><ul><li><p>PostgreSQL: dependency check, 若相同的query被其他transaction用過, 會發出error</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(balance) <span class="keyword">from</span> accounts; </span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(owner, balance, currency) <span class="keyword">values</span> (<span class="string">&#x27;sum&#x27;</span>, <span class="number">810</span>, <span class="string">&#x27;USD&#x27;</span>)</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(owner, balance, currency) <span class="keyword">values</span> (<span class="string">&#x27;sum&#x27;</span>, <span class="number">810</span>, <span class="string">&#x27;USD&#x27;</span>)</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">commit</span>; #success</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">commit</span>; #fail</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T2 would fail <span class="keyword">to</span> commit. </span><br><span class="line">Since the same <span class="keyword">insert</span> query has been queried <span class="keyword">by</span> T2.</span><br></pre></td></tr></table></figure></li><li><p>MySQL: locking mechanism,  用share lock來避免兩個transaction會看到不同的data</p></li></ul></li></ul><p>Retry Mechanism</p><ul><li>There might be errors, timeout or deadlocks</li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html</a></p><p><a href="https://www.postgresql.org/docs/current/transaction-iso.html">https://www.postgresql.org/docs/current/transaction-iso.html</a></p><h2 id="Lecture-11-RESTful-API-with-GIN"><a href="#Lecture-11-RESTful-API-with-GIN" class="headerlink" title="Lecture 11: RESTful API with GIN"></a>Lecture 11: RESTful API with GIN</h2><p>RESTful API:</p><ul><li>代表符合REST規範的API</li><li>HTTP為REST的實做</li><li>Client-Server</li><li>Stateless</li><li>Cache</li><li>Uniform Interface</li><li>Layered System</li><li>Code-On-Demand</li></ul><p>HTTP Request Method</p><ul><li>GET：從指定的資源中獲取信息（一個或多個子資源), 不會更動到內部資源<ul><li>Read</li></ul></li><li>POST：向指定的資源提交要被處理的數據。<ul><li>Create</li></ul></li><li>PUT：將指定的資源用請求中的數據替換(更新)<ul><li>Update</li></ul></li><li>DELETE：刪除指定的資源。<ul><li>Delete</li></ul></li></ul><p>main.go</p><ul><li>連線至postgreSQL, 並在8080這個port上面聽取request</li></ul><p>server.go</p><ul><li>將接收到的request透過GIN的router去呼叫對應的handler</li></ul><p>account.go</p><ul><li>實作request的handler (跟account有關的, 像是POST ⇒ createAccount, GET ⇒ getAccount &#x2F; listAccount)</li><li>會呼叫account.sql.go裡的function來把data實際寫入到database裡面</li></ul><h2 id="Lecture-12-Load-Config-by-Viper"><a href="#Lecture-12-Load-Config-by-Viper" class="headerlink" title="Lecture 12: Load Config by Viper"></a>Lecture 12: Load Config by Viper</h2><p>app.env:</p><ul><li>specify the environment variable</li><li>no need to hard coded in go files</li></ul><p>config.go</p><ul><li>use viper to load config files in a given path</li><li>read the .env files</li></ul><p>change main.go and main_test.go to read config through app.env</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Lecture-07-DB-Trasnac</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="bankend" scheme="http://leonhsi.github.io/tags/bankend/"/>
    
  </entry>
  
  <entry>
    <title>How to change icons in AstroNvim on Ubuntu</title>
    <link href="http://leonhsi.github.io/2023/04/16/How-to-change-icons-in-AstroNvim-on-Ubuntu/"/>
    <id>http://leonhsi.github.io/2023/04/16/How-to-change-icons-in-AstroNvim-on-Ubuntu/</id>
    <published>2023-04-16T07:28:25.000Z</published>
    <updated>2023-04-20T05:29:49.723Z</updated>
    
    <content type="html"><![CDATA[<p>If you are new to <a href="https://github.com/AstroNvim/AstroNvim">AstroNvim</a>, and haven’t installed any fonts on you linux, the default icons in AstroNvim might not be recongnized.</p><img style="display: block; margin: auto;" src="https://i.imgur.com/rauPWx3.png" /><h2 id="Install-Nerd-Fonts-on-Linux"><a href="#Install-Nerd-Fonts-on-Linux" class="headerlink" title="Install Nerd Fonts on Linux"></a>Install Nerd Fonts on Linux</h2><p>Choose the font you like (I choose DejaVuSansMono), download it on <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts</a> and unzip the compressed file.</p><p>Then, install the fonts on linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip DejaVuSansMono.zip</span><br><span class="line"><span class="built_in">cp</span> -r DejaVuSansMono/* ~/.local/share/fonts/</span><br></pre></td></tr></table></figure><p>Update the font-cache:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><p>Change the fonts for terminal:</p><img style="display: block; margin: auto;" src="https://i.imgur.com/BYnpgVJ.png"/><h2 id="Change-Config-File-in-Nvim"><a href="#Change-Config-File-in-Nvim" class="headerlink" title="Change Config File in Nvim"></a>Change Config File in Nvim</h2><p>Go to nvim config directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config/nvim/user</span><br></pre></td></tr></table></figure><p>Change <code>icons_enabled</code> to <code>true</code> in the <code>init.lua</code> file:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    g = &#123;</span><br><span class="line">      icons_enabled = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since nerd fonts is installed, the icons should be working right now.</p><p>See the official <a href="https://astronvim.com/Recipes/icons">Doc</a> for more details.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you are new to &lt;a href=&quot;https://github.com/AstroNvim/AstroNvim&quot;&gt;AstroNvim&lt;/a&gt;, and haven’t installed any fonts on you linux, the defau</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="nvim" scheme="http://leonhsi.github.io/tags/nvim/"/>
    
  </entry>
  
</feed>
