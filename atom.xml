<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon Hsi&#39;s Blog</title>
  
  
  <link href="http://leonhsi.github.io/atom.xml" rel="self"/>
  
  <link href="http://leonhsi.github.io/"/>
  <updated>2023-04-25T05:33:28.545Z</updated>
  <id>http://leonhsi.github.io/</id>
  
  <author>
    <name>Leon Hsi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Simple Bank - Lecture 14: Transfer Money API and Parameter Validator</title>
    <link href="http://leonhsi.github.io/2023/04/24/Simple-Bank-Lecture-14-Transfer-Money-API-and-Parameter-Validator/"/>
    <id>http://leonhsi.github.io/2023/04/24/Simple-Bank-Lecture-14-Transfer-Money-API-and-Parameter-Validator/</id>
    <published>2023-04-24T14:06:16.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><h2 id="CreateTransfer-API"><a href="#CreateTransfer-API" class="headerlink" title="CreateTransfer API"></a>CreateTransfer API</h2><p>實做<code>createTransfer</code> API的方式跟<code>createAccount</code>的方法差不多</p><p>會需要定義一個<code>transferRequest</code>的struct, 然後把GIN的context bind到這個struct的物件上</p><p>在<code>ctx.ShouldBindJSON(&amp;req)</code>這行就會去檢查ctx中每一個json欄位的要求是否有符合<code>transferRequest</code>的定義, 像是<code>Amount</code>必須要大於0或是<code>FromAccountId</code>最小為1</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">FromAccountId <span class="type">int64</span>  <span class="string">`json:&quot;from_account_id&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">ToAccountId   <span class="type">int64</span>  <span class="string">`json:&quot;to_account_id&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">Amount        <span class="type">int64</span>  <span class="string">`json:&quot;amount&quot; binding:&quot;required,gt=0&quot;`</span></span><br><span class="line">Currency      <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,checkCurrency&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來在<code>createTransfer</code>中還要去檢查<code>currency</code>是否合法</p><p>合法的意思是transfer request中指定的currency跟帳戶中的currency是不是同一種, 轉入跟轉出帳戶都要檢查</p><p>寫一個<code>validAccount</code>, 從database中拿到account的資料, 檢查request使用的currency跟account使用的currency是否相同, 若不同則會回應<code>BadRequest</code></p><p>接下來就可以測試看看, 先跑<code>make server</code>, 然後開啟postman來傳送API看看</p><p>在request的body中設定傳輸的資料</p><p><img src="https://i.imgur.com/4aNy65I.jpg"></p><p>因為account id 2使用的currency是USD, 所以會回覆<code>400 Bad Request</code></p><p><img src="https://i.imgur.com/ilJG4cK.jpg"></p><p>如果改成USD的話，就可以成功產生trasfer transaction</p><p><img src="https://i.imgur.com/VgLvxYD.jpg"></p><p>可以再利用tablePlus去看account id 2 跟 id 1的amount確實有減少100跟增加100</p><h2 id="Custom-Validator"><a href="#Custom-Validator" class="headerlink" title="Custom Validator"></a>Custom Validator</h2><p>validator是一個條件判斷式，可以用來註冊到GIN上面, 在bind GIN context的時候就會被檢查到</p><p>在<code>transferRequest</code>跟<code>createAccountRequest</code>中, Currency的binding條件都是去hard coded有哪些貨幣，但這樣對於擴充或是修改都很麻煩, 所以寫一個validator去判斷有哪幾種貨幣</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> createAccountRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">...</span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,oneof=USD,EUR&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">...</span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,oneof=USD,EUR&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>util/currency.go</code>中定義貨幣種類的const, 並寫一個<code>IsSupportedCurrencty</code>來判斷input currency是不是定義的constant之一</p><p>在<code>api/validator.go</code>中建立一個bool function變數<code>validCurrency</code>, 會回傳<code>util.IsSupportedCurrency</code></p><p>接著在server剛開始的時候把<code>validCurrency</code>註冊到GIN上面, 取名為<code>checkCurrency</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.RegisterValidation(<span class="string">&quot;checkCurrency&quot;</span>, validCurrency)</span><br></pre></td></tr></table></figure><p>最後就可以把<code>createAccountRequest</code>和<code>createTransferRequest</code>的binding改成<code>checkCurrency</code>, 等同於是呼叫<code>util.IsSupportedCurrency</code>來檢查，未來要新增或是修改貨幣種類就可以統一在<code>util/currency.go</code>中做修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">...</span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,checkCurrency&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> createAccountRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">...</span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,checkCurrency&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CreateTransfer-API&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 13: Mock DB for testing HTTP API</title>
    <link href="http://leonhsi.github.io/2023/04/20/Simple-Bank-Lecture-13-Mock-DB-for-testing-HTTP-API/"/>
    <id>http://leonhsi.github.io/2023/04/20/Simple-Bank-Lecture-13-Mock-DB-for-testing-HTTP-API/</id>
    <published>2023-04-20T15:27:12.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><p>gomock:</p><ul><li>use gomock to mock db to return hard coded values</li><li>用來測試server HTTP API handling</li></ul><p>in server.go, NewServer(store *db.Store) 都是接收一個db store object,</p><p>這個store object會連接到真正的database, 即是需要去mock這個object</p><p>為了產生mock的db, 把store object換成一個interface,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Store interface &#123;</span><br><span class="line">Querier</span><br><span class="line">TransferTX(....)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Store struct &#123;</span><br><span class="line">db *sql.DB</span><br><span class="line">*Queries</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mockgen來產生被mock的store:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mockgen -package &lt;package_name&gt; -destination /path/to/output &lt;module_name&gt;/path/to/interface &lt;interface_name&gt; </span></span><br><span class="line">mockgen -package mockdb -destination db/mock/store.go github.com/techschool/simplebank/db/sqlc Store</span><br></pre></td></tr></table></figure><p>在<code>db/mock/</code>裡的<code>store.go</code>裡面的<code>MockStore</code>就是a mock of Store interface</p><h3 id="Test-HTTP-API"><a href="#Test-HTTP-API" class="headerlink" title="Test HTTP API"></a>Test HTTP API</h3><p>接著就可以在<code>api</code> package裡面新增一個檔案<code>account_test.go</code>來測試account handler</p><p>在account handler裡面用一個function <code>TestGetAccountAPI()</code>來測試<code>getAccount</code></p><p>這個function主要負責:</p><ol><li>產生一個MockStore object <code>store</code></li><li>產生stubs: 即設定<code>store</code>裡的GetAccount function的參數, 呼叫次數和回傳值</li><li>利用假的<code>store</code>產生新的<code>server</code> object, 開始傳送request</li><li>傳送<code>/account/id</code> url來測試account handler裡面的<code>getAccount</code>是否正確</li><li>檢查status code是否為200 OK, body的內容是否為假<code>store</code>所回傳的account</li></ol><p>總之就是利用假的store物件來創立server, 寫死database(<code>store</code> object)要回傳的值, 來測試HTTP GET METHOD是否正確</p><p>接下來要擴充test case, 加入<code>NotFound</code>, <code>InternalError</code> 跟 <code>InvalidID</code>的測試, 來達到<code>getAccount</code> 的code coverage 100%</p><p>為了程式碼的整潔性, 使用golang的anonymous struct, 即不宣告struct而是直接建立<br>example:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">foo := <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="type">int64</span>,</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125; &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&quot;trash&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用到struct的好處, 將資料都集中在一起, 且只會被用到一次的話就不用特別再宣告命名它</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name          <span class="type">string</span></span><br><span class="line">    accountID     <span class="type">int64</span></span><br><span class="line">    buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">    checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">    &#123;   <span class="comment">// test case 1</span></span><br><span class="line">        name:         <span class="string">&quot;test OK&quot;</span>,          </span><br><span class="line">accountID:    account.ID,</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span>&#123;</span><br><span class="line">            <span class="comment">// buildStubs implementation</span></span><br><span class="line">        &#125;,</span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest ResponseRecorder)</span></span>&#123;</span><br><span class="line">            <span class="comment">// checkResponse implementation</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">// test case 2</span></span><br><span class="line">        name:         <span class="string">&quot;test NotFound&quot;</span>,          </span><br><span class="line">accountID:    account.ID,</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span>&#123;&#125;,</span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest ResponseRecorder)</span></span>&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">// test case 3</span></span><br><span class="line">        name:         <span class="string">&quot;test InternalError&quot;</span>,          </span><br><span class="line">accountID:    account.ID,</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span>&#123;&#125;,</span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest ResponseRecorder)</span></span>&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">// test case 4</span></span><br><span class="line">        name:         <span class="string">&quot;test InvalidID&quot;</span>,          </span><br><span class="line">accountID:    account.ID,</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span>&#123;&#125;,</span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest ResponseRecorder)</span></span>&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testCase</code>是一個array of anonymous struct, 這個anonymous struct包含:</p><ul><li>測試的名字, </li><li>要被抓取的accountID, </li><li><code>buildStubs</code>設定假的<code>store</code>物件的<code>GetAccount</code> method的參數、呼叫次數跟回傳值等等, </li><li><code>checkResponse</code>檢查http response的status跟body</li></ul><p>因為<code>getAccount</code>總共可能會產生四種status:</p><ul><li>OK</li><li>Bad Request: accountID不可能存在於datebase (i.e., 小於1)</li><li>Not Found: accountID不存在於database</li><li>Internal Error: 連不上database</li></ul><p>所以就建立四種testCase, 有各自定義好的accountID, <code>buildStubs</code>, <code>checkResponse</code>等等</p><p>如此就包含了<code>getAccount</code>的所有status, 達到code coverage 100%</p><h3 id="Gin-TestMode"><a href="#Gin-TestMode" class="headerlink" title="Gin TestMode"></a>Gin TestMode</h3><p>在vscode上面run <code>api</code>的package test時, GIN會印出很多重複性log導致眼花撩亂, 這是因為GIN的預設模式是debug mode</p><p>解決方法是在<code>api</code> package裡面建立一個<code>main_test.go</code>, 並在<code>TestMain</code> function裡面設定GIN為TestMode就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gomock:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use g</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>How to change icons in AstroNvim on Ubuntu</title>
    <link href="http://leonhsi.github.io/2023/04/16/How-to-change-icons-in-AstroNvim-on-Ubuntu/"/>
    <id>http://leonhsi.github.io/2023/04/16/How-to-change-icons-in-AstroNvim-on-Ubuntu/</id>
    <published>2023-04-16T07:28:25.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p>If you are new to <a href="https://github.com/AstroNvim/AstroNvim">AstroNvim</a>, and haven’t installed any fonts on you linux, the default icons in AstroNvim might not be recongnized.</p><img style="display: block; margin: auto;" src="https://i.imgur.com/rauPWx3.png" /><h2 id="Install-Nerd-Fonts-on-Linux"><a href="#Install-Nerd-Fonts-on-Linux" class="headerlink" title="Install Nerd Fonts on Linux"></a>Install Nerd Fonts on Linux</h2><p>Choose the font you like (I choose DejaVuSansMono), download it on <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts</a> and unzip the compressed file.</p><p>Then, install the fonts on linux:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip DejaVuSansMono.zip</span><br><span class="line"><span class="built_in">cp</span> -r DejaVuSansMono/* ~/.local/share/fonts/</span><br></pre></td></tr></table></figure><p>Update the font-cache:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><p>Change the fonts for terminal:</p><img style="display: block; margin: auto;" src="https://i.imgur.com/BYnpgVJ.png"/><h2 id="Change-Config-File-in-Nvim"><a href="#Change-Config-File-in-Nvim" class="headerlink" title="Change Config File in Nvim"></a>Change Config File in Nvim</h2><p>Go to nvim config directory:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config/nvim/user</span><br></pre></td></tr></table></figure><p>Change <code>icons_enabled</code> to <code>true</code> in the <code>init.lua</code> file:</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    g = &#123;</span><br><span class="line">      icons_enabled = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since nerd fonts is installed, the icons should be working right now.</p><p>See the official <a href="https://astronvim.com/Recipes/icons">Doc</a> for more details.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you are new to &lt;a href=&quot;https://github.com/AstroNvim/AstroNvim&quot;&gt;AstroNvim&lt;/a&gt;, and haven’t installed any fonts on you linux, the defau</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="nvim" scheme="http://leonhsi.github.io/tags/nvim/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 12: Load Config by Viper</title>
    <link href="http://leonhsi.github.io/2023/03/31/Simple-Bank-Lecture-12-Load-Config-by-Viper/"/>
    <id>http://leonhsi.github.io/2023/03/31/Simple-Bank-Lecture-12-Load-Config-by-Viper/</id>
    <published>2023-03-31T15:29:12.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><p>app.env:</p><ul><li>specify the environment variable</li><li>no need to hard coded in go files</li></ul><p>config.go</p><ul><li>use viper to load config files in a given path</li><li>read the .env files</li></ul><p>change main.go and main_test.go to read config through app.env</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;app.env:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spec</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 11: RESTful API with GIN</title>
    <link href="http://leonhsi.github.io/2023/03/30/Simple-Bank-Lecture-11-RESTful-API-with-GIN/"/>
    <id>http://leonhsi.github.io/2023/03/30/Simple-Bank-Lecture-11-RESTful-API-with-GIN/</id>
    <published>2023-03-30T15:30:19.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><p>RESTful API:</p><ul><li>代表符合REST規範的API</li><li>HTTP為REST的實做</li><li>Client-Server</li><li>Stateless</li><li>Cache</li><li>Uniform Interface</li><li>Layered System</li><li>Code-On-Demand</li></ul><p>HTTP Request Method</p><ul><li>GET：從指定的資源中獲取信息（一個或多個子資源), 不會更動到內部資源<ul><li>Read</li></ul></li><li>POST：向指定的資源提交要被處理的數據。<ul><li>Create</li></ul></li><li>PUT：將指定的資源用請求中的數據替換(更新)<ul><li>Update</li></ul></li><li>DELETE：刪除指定的資源。<ul><li>Delete</li></ul></li></ul><p>main.go</p><ul><li>連線至postgreSQL, 並在8080這個port上面聽取request</li></ul><p>server.go</p><ul><li>將接收到的request透過GIN的router去呼叫對應的handler</li></ul><p>account.go</p><ul><li>實作request的handler (跟account有關的, 像是POST ⇒ createAccount, GET ⇒ getAccount &#x2F; listAccount)</li><li>會呼叫account.sql.go裡的function來把data實際寫入到database裡面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RESTful API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 09: Isolation Level</title>
    <link href="http://leonhsi.github.io/2023/03/20/Simple-Bank-Lecture-09-Isolation-Level/"/>
    <id>http://leonhsi.github.io/2023/03/20/Simple-Bank-Lecture-09-Isolation-Level/</id>
    <published>2023-03-20T15:32:14.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><p>A database transaction should follow the <strong>ACID</strong> property:</p><ul><li>Atomicity<ul><li>要馬所有operation都要成功完成, 不然transaction fail且db保持不變</li></ul></li><li>Isolation<ul><li>Concurrent transactions必不會互相影響</li></ul></li><li>Consistency<ul><li>在transaction完成之後, db state必須要是valid的</li></ul></li><li>Durability<ul><li>data written by a successful transaction must be recorded in persistent storage</li></ul></li></ul><p>其中, 有一些 <strong>Read Phenomena</strong> 會影響到 Isolation property:</p><ul><li>Dirty Read<ul><li>一個transaction會讀到其他transaction uncommitted的data</li></ul></li><li>Non-repeatable Read<ul><li>一個transaction重複讀了兩次data卻發現data被修改過(by another <strong>committed</strong> transaction)</li></ul></li><li>Phantom(幻象) Read<ul><li>一個transaction重複搜尋了兩次相同的條件卻得到不同的rows (due to another recently <strong>committed</strong> transaction)</li></ul></li><li>serialization anomaly<ul><li>若將所有的transaction sequentially run, 不可能會得到正確的結果</li></ul></li></ul><p>4 Standard <strong>Isolation Levels</strong> are defined by ANSI:</p><ul><li>Read uncommitted<ul><li>可以看到尚未被commit的data</li></ul></li><li>Read Committed<ul><li>只能看到被commit過後的data (avoid dirty read)</li></ul></li><li>Repeatable read<ul><li>一樣的select query會回傳同樣結果 (avoid non-repeatable &amp; phantom read)</li></ul></li><li>serializable<ul><li>保證serially的按照某種順序去跑transaction, 結果會跟concurrently跑的結果一樣</li></ul></li></ul><p>(MySQL)</p><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Non-repeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>No</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>Serializable</td><td>No</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><p>(PostgreSQL)</p><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Non-repeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>No</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>Serializable</td><td>No</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><p>MySQL v.s. PostgreSQL</p><ul><li><p>MySQL可以設置所有的transaction的isolation level, PostgreSQL只能設定一個transaction的isolation level</p></li><li><p>MySQL</p><ul><li><p>在serializable, mysql預設會把 SELECT 變成 SELECT FOR SHARE</p><ul><li>若transaction 1去 SELECT * from accounts where id &#x3D; 1, 則transaction 2要去update account id 1就會被block</li></ul>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> accounts <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">Transaction <span class="number">2</span> would be blocked</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> accounts <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">Dead lock would occur, since T2 <span class="keyword">is</span> waiting T1 <span class="keyword">to</span> <span class="keyword">release</span> the lock, </span><br><span class="line">while T1 <span class="keyword">is</span> also waiting <span class="keyword">to</span> T2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PostgreSQL</p><ul><li>read uncommitted 跟 read committed 一樣<ul><li>read uncommitted 也不允許 dirty read</li></ul></li><li>repeatable read 可以防止 phantom read</li></ul></li><li><p>在serializable level 對付serialization anomaly 的方法</p><ul><li><p>PostgreSQL: dependency check, 若相同的query被其他transaction用過, 會發出error</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(balance) <span class="keyword">from</span> accounts; </span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(owner, balance, currency) <span class="keyword">values</span> (<span class="string">&#x27;sum&#x27;</span>, <span class="number">810</span>, <span class="string">&#x27;USD&#x27;</span>)</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(owner, balance, currency) <span class="keyword">values</span> (<span class="string">&#x27;sum&#x27;</span>, <span class="number">810</span>, <span class="string">&#x27;USD&#x27;</span>)</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"><span class="keyword">commit</span>; #success</span><br><span class="line">T2:</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T1:</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">commit</span>; #fail</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">T2 would fail <span class="keyword">to</span> commit. </span><br><span class="line">Since the same <span class="keyword">insert</span> query has been queried <span class="keyword">by</span> T2.</span><br></pre></td></tr></table></figure></li><li><p>MySQL: locking mechanism,  用share lock來避免兩個transaction會看到不同的data</p></li></ul></li></ul><p>Retry Mechanism</p><ul><li>There might be errors, timeout or deadlocks</li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html</a></p><p><a href="https://www.postgresql.org/docs/current/transaction-iso.html">https://www.postgresql.org/docs/current/transaction-iso.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A database transaction sho</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 08: Avoid Deadlock</title>
    <link href="http://leonhsi.github.io/2023/03/20/Simple-Bank-Lecture-08-Avoid-Deadlock/"/>
    <id>http://leonhsi.github.io/2023/03/20/Simple-Bank-Lecture-08-Avoid-Deadlock/</id>
    <published>2023-03-20T12:33:09.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><p>avoid:</p><ul><li>transaction 1:<ul><li>update id 1</li><li>update id 2</li></ul></li><li>transaction 2:<ul><li>update id 2</li><li>update id 1</li></ul></li></ul><p><strong>deadlock</strong>!!</p><p>change to:</p><ul><li>transaction 1:<ul><li>update id 1</li><li>update id 2</li></ul></li><li>transaction 2:<ul><li>update id 1</li><li>update id 2</li></ul></li></ul><p>依照固定的order來更新id (小的先更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;avoid:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transa</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Simple Bank - Lecture 07: DB Transaction Lock</title>
    <link href="http://leonhsi.github.io/2023/03/18/Simple-Bank-Lecture-07-DB-Transaction-Lock/"/>
    <id>http://leonhsi.github.io/2023/03/18/Simple-Bank-Lecture-07-DB-Transaction-Lock/</id>
    <published>2023-03-18T15:33:53.000Z</published>
    <updated>2023-04-25T05:33:28.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">course list link</a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccount :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>加上</p><ul><li><p><strong>FOR UPDATE</strong></p><ul><li>因為同時會有很多transaction去更新(select) account</li><li>若一個account被select, 但不block其他select account, 則account可能會無法被正確更新</li><li>加上FOR UPDATE: block其他query<ul><li>這個query select的東西會被update, 所以sql會先block它</li></ul></li></ul></li><li><p>FOR <strong>NO KEY</strong> UPDATE</p><ul><li>因為primary key不會update</li><li>告訴db說不要因為primary key被使用就block其他query</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">NO</span> KEY <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&quot;&gt;course list link&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;</summary>
      
    
    
    
    <category term="tech" scheme="http://leonhsi.github.io/categories/tech/"/>
    
    
    <category term="simple-bank" scheme="http://leonhsi.github.io/tags/simple-bank/"/>
    
    <category term="backend" scheme="http://leonhsi.github.io/tags/backend/"/>
    
  </entry>
  
</feed>
